@page "/reviews"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JS

<div class="reviews-container">
    <div class="nav-links">
        <a href="/chat" class="nav-link">WonderWorld Chat</a>
        <a href="/regularchat" class="nav-link">Regular Chat</a>
        <a href="/piichat" class="nav-link">PII Chat</a>
        <a href="/reviews" class="nav-link active">Reviews</a>
    </div>
    
    <div class="reviews-header">
        <h2>Product Reviews</h2>
        <div class="product-selector">
            <label for="productSelect">Select Product:</label>
            <select id="productSelect" @bind="SelectedProductId" @bind:after="LoadReviews">
                <option value="1">Product 1</option>
                <option value="2">Product 2</option>
                <option value="3">Product 3</option>
                <option value="4">Product 4</option>
                <option value="5">Product 5</option>
                <option value="6">Product 6</option>
            </select>
        </div>
    </div>

    <div class="reviews-content">
        <div class="reviews-section">
            <div class="section-header">
                <h3>Reviews for Product @SelectedProductId</h3>
                <button class="btn btn-primary" @onclick="SummarizeReviews" disabled="@IsSummarizing">
                    @if (IsSummarizing)
                    {
                        <span>Summarizing...</span>
                    }
                    else
                    {
                        <span>Generate Summary</span>
                    }
                </button>
            </div>

            @if (ReviewList.Any())
            {
                <div class="reviews-list">
                    @foreach (var review in ReviewList)
                    {
                        <div class="review-card">
                            <div class="review-header">
                                <div class="review-author">@review.Author</div>
                                <div class="review-rating">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <span class="star @(i <= review.Rating ? "filled" : "")">â˜…</span>
                                    }
                                </div>
                                <div class="review-date">@review.CreatedAt.ToString("MMM dd, yyyy")</div>
                            </div>
                            <div class="review-content">@review.Content</div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="no-reviews">No reviews available for this product.</div>
            }
        </div>

        @if (!string.IsNullOrEmpty(Summary))
        {
            <div class="summary-section">
                <h3>AI-Generated Summary</h3>
                <div class="summary-content">@Summary</div>
                <div class="summary-meta">
                    <small>Generated using @SummaryProvider</small>
                </div>
            </div>
        }

        <div class="add-review-section">
            <h3>Add a Review</h3>
            <div class="review-form">
                <div class="form-group">
                    <label for="authorInput">Your Name:</label>
                    <input id="authorInput" @bind="NewReview.Author" placeholder="Enter your name" class="form-input" />
                </div>
                <div class="form-group">
                    <label for="ratingInput">Rating:</label>
                    <select id="ratingInput" @bind="NewReview.Rating" class="form-input">
                        <option value="5">5 Stars - Excellent</option>
                        <option value="4">4 Stars - Very Good</option>
                        <option value="3">3 Stars - Good</option>
                        <option value="2">2 Stars - Fair</option>
                        <option value="1">1 Star - Poor</option>
                    </select>
                </div>
                <div class="form-group">
                    <label for="contentInput">Review:</label>
                    <textarea id="contentInput" @bind="NewReview.Content" placeholder="Share your experience with this product..." class="form-textarea" rows="4"></textarea>
                </div>
                <button class="btn btn-success" @onclick="SubmitReview" disabled="@(string.IsNullOrWhiteSpace(NewReview.Content) || IsSubmitting)">
                    @if (IsSubmitting)
                    {
                        <span>Submitting...</span>
                    }
                    else
                    {
                        <span>Submit Review</span>
                    }
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Review> ReviewList = new();
    private string Summary = string.Empty;
    private string SummaryProvider = string.Empty;
    private int SelectedProductId = 1;
    private bool IsSummarizing = false;
    private bool IsSubmitting = false;
    private ReviewRequest NewReview = new() { ProductId = 1, Rating = 5 };

    protected override async Task OnInitializedAsync()
    {
        await LoadReviews();
    }

    private async Task LoadReviews()
    {
        try
        {
            NewReview.ProductId = SelectedProductId;
            var reviews = await Http.GetFromJsonAsync<List<Review>>($"api/Reviews/{SelectedProductId}");
            if (reviews != null)
            {
                ReviewList = reviews;
            }
            
            // Clear summary when switching products
            Summary = string.Empty;
            SummaryProvider = string.Empty;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading reviews: {ex.Message}");
        }
    }

    private async Task SummarizeReviews()
    {
        try
        {
            IsSummarizing = true;
            StateHasChanged();

            var response = await Http.PostAsync($"api/Reviews/{SelectedProductId}/summarize?provider=OpenAI", null);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<SummaryResponse>();
                if (result != null)
                {
                    Summary = result.summary;
                    SummaryProvider = result.provider;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error summarizing reviews: {ex.Message}");
        }
        finally
        {
            IsSummarizing = false;
            StateHasChanged();
        }
    }

    private async Task SubmitReview()
    {
        if (string.IsNullOrWhiteSpace(NewReview.Content)) return;

        try
        {
            IsSubmitting = true;
            StateHasChanged();

            var response = await Http.PostAsJsonAsync("api/Reviews", NewReview);
            if (response.IsSuccessStatusCode)
            {
                // Clear form
                NewReview.Content = string.Empty;
                NewReview.Author = string.Empty;
                NewReview.Rating = 5;
                
                // Reload reviews
                await LoadReviews();
                
                // Clear summary since we have new data
                Summary = string.Empty;
                SummaryProvider = string.Empty;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error submitting review: {ex.Message}");
        }
        finally
        {
            IsSubmitting = false;
            StateHasChanged();
        }
    }

    public class Review
    {
        public int Id { get; set; }
        public int ProductId { get; set; }
        public string Content { get; set; } = string.Empty;
        public int Rating { get; set; }
        public string Author { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
    }

    public class ReviewRequest
    {
        public int ProductId { get; set; }
        public string Content { get; set; } = string.Empty;
        public int Rating { get; set; }
        public string Author { get; set; } = string.Empty;
    }

    public class SummaryResponse
    {
        public string summary { get; set; } = string.Empty;
        public string provider { get; set; } = string.Empty;
    }
}
