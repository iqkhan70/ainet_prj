@page "/piichat"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using System.Text.RegularExpressions
@inject HttpClient Http
@inject IJSRuntime JS

<div class="chat-container">
    <div class="nav-links">
        <a href="/chat" class="nav-link">Chat</a>
        <a href="/piichat" class="nav-link active">PII Chat</a>
        <a href="/reviews" class="nav-link">Reviews</a>
    </div>
    
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in Messages)
        {
            @if (message.StartsWith("You:"))
            {
                <div class="message-container user-container">
                    <div class="message user-message">
                        <div class="message-content">
                            @message.Substring(4)
                        </div>
                    </div>
                </div>
            }
            else if (message.StartsWith("Bot:"))
            {
                <div class="message-container bot-container">
                    <div class="message bot-message">
                        <div class="message-content">
                            @message.Substring(4)
                        </div>
                    </div>
                </div>
            }
            else if (message.StartsWith("System:"))
            {
                <div class="message-container system-container">
                    <div class="message system-message">
                        <div class="message-content">
                            @message.Substring(7)
                        </div>
                    </div>
                </div>
            }
        }
        
        @if (IsLoading)
        {
            <div class="message-container bot-container">
                <div class="message bot-message">
                    <div class="message-content">
                        <div style="display: flex; flex-direction: row; gap: 6px;">
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.2s;"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.4s;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    
    <div class="chat-input-container">
        <div class="input-wrapper">
            <input 
                @bind="UserInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="Ask me something (PII will be blocked)..." 
                class="chat-input" 
                disabled="@IsLoading"
            />
            <button class="send-button" @onclick="Send" disabled="@(string.IsNullOrWhiteSpace(UserInput) || IsLoading)">
                @if (IsLoading)
                {
                    <div class="spinner"></div>
                }
                else
                {
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z" fill="currentColor"/>
                    </svg>
                }
            </button>
        </div>
        
        @if (PiiDetected)
        {
            <div class="pii-warning">
                <div class="warning-icon">⚠️</div>
                <div class="warning-content">
                    <strong>PII Detected!</strong> Your message contains sensitive information that cannot be sent.
                    <div class="pii-details">
                        Detected: @string.Join(", ", DetectedPiiTypes)
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string UserInput { get; set; } = string.Empty;
    private List<string> Messages = new();
    private bool IsLoading = false;
    private bool PiiDetected = false;
    private List<string> DetectedPiiTypes = new();

    // PII Detection Patterns
    private readonly Dictionary<string, Regex> PiiPatterns = new()
    {
        ["SSN"] = new Regex(@"\b\d{3}[-]?\d{2}[-]?\d{4}\b|\b\d{9}\b"),
        ["Credit Card"] = new Regex(@"\b\d{4}[\s-]?\d{4}[\s-]?\d{4}[\s-]?\d{4}\b|\b\d{4}[\s-]?\d{6}[\s-]?\d{5}\b"),
        ["Phone Number"] = new Regex(@"\b\(?\d{3}\)?[\s-]?\d{3}[\s-]?\d{4}\b|\b\+\d{1,3}[\s-]?\d{3}[\s-]?\d{3}[\s-]?\d{4}\b"),
        ["Email"] = new Regex(@"\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b"),
        ["Address"] = new Regex(@"\b\d+\s+[A-Za-z\s]+(?:Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Drive|Dr|Way|Court|Ct|Place|Pl|Circle|Cir|Highway|Hwy|Parkway|Pkwy)\b", RegexOptions.IgnoreCase),
        ["IP Address"] = new Regex(@"\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b"),
        ["Date of Birth"] = new Regex(@"\b(?:0[1-9]|1[0-2])[/-](?:0[1-9]|[12]\d|3[01])[/-](?:19|20)\d{2}\b"),
        ["Passport Number"] = new Regex(@"\b[A-Z]{1,2}[0-9]{6,9}\b"),
        ["Driver License"] = new Regex(@"\b[A-Z]{1,2}[0-9]{6,8}\b")
    };

    protected override async Task OnInitializedAsync()
    {
        Messages.Add("System: Welcome to PII-Protected Chat! I'll help you while ensuring no sensitive information is transmitted.");
        Messages.Add("System: I can detect SSNs, credit cards, phone numbers, emails, addresses, IP addresses, dates of birth, passport numbers, and driver license numbers.");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(UserInput) && !IsLoading)
        {
            await Send();
        }
    }

    private void CheckForPii(string input)
    {
        PiiDetected = false;
        DetectedPiiTypes.Clear();

        foreach (var pattern in PiiPatterns)
        {
            if (pattern.Value.IsMatch(input))
            {
                PiiDetected = true;
                DetectedPiiTypes.Add(pattern.Key);
            }
        }
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || IsLoading) return;
        
        // Check for PII before sending
        CheckForPii(UserInput);
        
        if (PiiDetected)
        {
            // Don't send the message, just show the warning
            StateHasChanged();
            return;
        }
        
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            // Play send sound
            await JS.InvokeVoidAsync("playSound", "send");
            
            var request = new { prompt = UserInput, conversationId = Guid.NewGuid() };
            var response = await Http.PostAsJsonAsync("api/Chat", request);
            var data = await response.Content.ReadFromJsonAsync<ChatResponse>();
            
            Messages.Add($"You: {UserInput}");
            UserInput = string.Empty;
            
            // Simple delay to show typing animation
            await Task.Delay(1500);
            
            if (data?.message != null)
            {
                Messages.Add($"Bot: {data.message}");
                // Play receive sound
                await JS.InvokeVoidAsync("playSound", "receive");
            }
            else
            {
                Messages.Add($"Bot: Sorry, I couldn't process your request.");
            }
        }
        catch (Exception ex)
        {
            Messages.Add($"Error: {ex.Message}");
            // Play error sound
            await JS.InvokeVoidAsync("playSound", "error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            
            // Scroll to bottom after sending message
            await Task.Delay(100);
            await JS.InvokeVoidAsync("scrollToBottom");
        }
    }

    public class ChatResponse
    {
        public string message { get; set; } = string.Empty;
    }
}
