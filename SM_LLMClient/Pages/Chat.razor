@page "/chat"
@using System.Net.Http.Json
@using Microsoft.JSInterop
@inject HttpClient Http
@inject IJSRuntime JS

<div class="chat-container">
    <div class="nav-links">
        <a href="/chat" class="nav-link active">WonderWorld Chat</a>
        <a href="/regularchat" class="nav-link">Regular Chat</a>
        <a href="/piichat" class="nav-link">PII Chat</a>
        <a href="/reviews" class="nav-link">Reviews</a>
    </div>
    
    <div class="chat-messages" id="chatMessages">
        @foreach (var message in Messages)
        {
            @if (message.StartsWith("You:"))
            {
                <div class="message-container user-container">
                    <div class="message user-message">
                        <div class="message-content">
                            @message.Substring(4)
                        </div>
                    </div>
                </div>
            }
            else if (message.StartsWith("Bot:"))
            {
                <div class="message-container bot-container">
                    <div class="message bot-message">
                        <div class="message-content">
                            @message.Substring(4)
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="message-container system-container">
                    <div class="message system-message">
                        <div class="message-content">
                            @message
                        </div>
                    </div>
                </div>
            }
        }
        
        @if (IsLoading)
        {
            <div class="message-container bot-container">
                <div class="message bot-message">
                    <div class="message-content">
                        <div style="display: flex; flex-direction: row; gap: 6px;">
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.2s;"></div>
                            </div>
                            <div class="dot-container">
                                <div class="dot-base"></div>
                                <div class="dot-overlay" style="animation-delay: 0.4s;"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
    <div class="chat-input-container">
        <div class="input-wrapper">
            <input 
                @bind="UserInput" 
                @bind:event="oninput" 
                @onkeydown="HandleKeyDown" 
                placeholder="Ask me about WonderWorld theme park..." 
                class="chat-input" 
                disabled="@IsLoading"
                maxlength="1000"
            />
            <button 
                @onclick="Send" 
                disabled="@IsLoading || string.IsNullOrWhiteSpace(UserInput)" 
                class="send-button"
            >
                <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <line x1="22" y1="2" x2="11" y2="13"></line>
                    <polygon points="22,2 15,22 11,13 2,9"></polygon>
                </svg>
            </button>
        </div>
    </div>
</div>

@code {
    private string UserInput { get; set; } = string.Empty;
    private List<string> Messages = new();
    private bool IsLoading = false;

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(UserInput) && !IsLoading)
        {
            await Send();
        }
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(UserInput) || IsLoading) return;
        
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            // Play send sound
            await JS.InvokeVoidAsync("playSound", "send");
            
            var request = new { prompt = UserInput, conversationId = Guid.NewGuid() };
            var response = await Http.PostAsJsonAsync("api/Chat", request);
            var data = await response.Content.ReadFromJsonAsync<ChatResponse>();
            
            Messages.Add($"You: {UserInput}");
            UserInput = string.Empty;
            
            // Simple delay to show typing animation
            await Task.Delay(1500);
            
            if (data?.message != null)
            {
                Messages.Add($"Bot: {data.message}");
                // Play receive sound
                await JS.InvokeVoidAsync("playSound", "receive");
            }
            else
            {
                Messages.Add($"Bot: Sorry, I couldn't process your request.");
            }
        }
        catch (Exception ex)
        {
            Messages.Add($"Error: {ex.Message}");
            // Play error sound
            await JS.InvokeVoidAsync("playSound", "error");
        }
        finally
        {
            IsLoading = false;
            StateHasChanged();
            
            // Scroll to bottom after sending message
            await Task.Delay(100);
            await JS.InvokeVoidAsync("scrollToBottom");
        }
    }

    public class ChatResponse
    {
        public string message { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Call GET /api/chat when the page first loads
        try
        {
            var data = await Http.GetFromJsonAsync<ChatResponse>("api/Chat");
            if (data != null && !string.IsNullOrEmpty(data.message))
            {
                Messages.Add($"Bot: {data.message}");
            }
        }
        catch (Exception ex)
        {
            Messages.Add($"Error: {ex.Message}");
        }
    }
}
